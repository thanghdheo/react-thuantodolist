{"version":3,"sources":["Components/TodoList/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["TodoList","props","listTodo","handleDelete","onHandleSubmit","onHandleUpdate","useState","show","setShow","id","setId","search","setSearch","useEffect","validate","yup","shape","name","required","useForm","resolver","yupResolver","control","handleSubmit","errors","formState","setValue","getValues","handleSetInput","e","find","todo","indexOf","target","className","Form","onSubmit","data","handleSubmitData","FormGroup","Label","defaultValue","render","field","Input","placeholder","onInput","result","filter","trim","toLowerCase","value","onHandleSearch","message","console","log","Button","type","color","onClick","style","marginLeft","map","index","findIndex","onHandleDelete","defaultProps","App","todoList","setToDoList","localStorage","getItem","JSON","parse","setItem","stringify","newTodoList","splice","handleUpdate","push","uuidv4","handleAddList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"2SA4BA,SAASA,EAASC,GACd,IAAOC,EAAuDD,EAAvDC,SAASC,EAA8CF,EAA9CE,aAAaC,EAAiCH,EAAjCG,eAAeC,EAAkBJ,EAAlBI,eAE5C,EAAuBC,oBAAS,GAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAmBF,mBAAS,GAA5B,mBAAOG,EAAP,KAAUC,EAAV,KACA,EAA2BJ,mBAAS,YAAIJ,IAAxC,mBAAOS,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACND,EAAUV,KACZ,CAACA,IAEH,IAAMY,EAAWC,MAAaC,MAAM,CAChCC,KAAMF,MAAaG,SAAS,mEAGhC,EAAsEC,YAAQ,CAC1EC,SAAUC,YAAYP,KADnBQ,EAAP,EAAOA,QAAQC,EAAf,EAAeA,aAAyBC,EAAxC,EAA4BC,UAAYD,OAAQE,EAAhD,EAAgDA,SAASC,EAAzD,EAAyDA,UAoBnDC,EAAiB,SAACC,GACpB,IAAMC,EAAO5B,EAAS4B,MAAK,SAACC,GAAD,OAA8C,IAApCA,EAAKtB,GAAGuB,QAAQH,EAAEI,OAAOhB,SAC9DS,EAAS,OAAOI,EAAKb,MACrBP,EAAMoB,EAAKrB,IACXD,GAAQ,IAsBZ,OACI,sBAAK0B,UAAU,gBAAf,UACI,cAACC,EAAA,EAAD,CAAMC,SAAUb,GAAa,SAACc,GAAD,OA5CZ,SAACA,GACnBjC,IACCA,EAAeiC,GACfX,EAAS,OAAO,IAChBlB,GAAQ,IAwC6B8B,CAAiBD,MAAtD,SAEI,eAACE,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAON,UAAU,iBAAiBzB,GAAG,SAArC,6BACA,cAAC,IAAD,CACIQ,KAAK,OACLK,QAASA,EACTmB,aAAa,GACbC,OAAQ,YAAY,IAAD,EAATC,EAAS,EAATA,MACN,OAAO,qCACK,cAACC,EAAA,EAAD,yBAAOV,UAAU,uBAAuBzB,GAAG,SAASoC,YAAY,sBAAyBF,GAAzF,IAAgGG,QAAS,SAACjB,GAAD,OAnBvH,SAACA,GACnB,IAAMkB,EAAS7C,EAAS8C,QAAO,SAACjB,GAAD,OAA2F,IAAjFA,EAAKd,KAAKgC,OAAOC,cAAclB,QAAQH,EAAEI,OAAOkB,MAAMF,OAAOC,kBACtGtC,EAAUmC,GAiBsIK,CAAevB,OAC/H,sBAAMK,UAAU,kBAAhB,mBAAmCV,EAAOP,YAA1C,aAAmC,EAAaoC,UAC/CC,QAAQC,IAAIZ,SAMjC,cAACa,EAAA,EAAD,CAAQC,KAAK,SAASvB,UAAU,OAAOwB,MAAM,UAA7C,iBACCnD,EAAK,cAACiD,EAAA,EAAD,CAAQC,KAAK,SAASE,QAxCvB,WACjB,GAAGtD,EAAe,CACd,IAAM8C,EAAQ,CACV1C,GAAIA,EACJQ,KAAMU,EAAU,SAEpBtB,EAAeI,EAAG0C,GAEtBzB,EAAS,OAAO,IAChBlB,GAAQ,IA+BuD0B,UAAU,OAAO0B,MAAO,CAACC,WAAY,OAAQH,MAAM,UAAhG,oBAA0H,UAIxI,qBAAKxB,UAAU,WAAf,SACI,oBAAKA,UAAU,eAAf,SAEQvB,EAAOmD,KAAI,SAAC/B,EAAKgC,GACb,OACI,qBAAI7B,UAAU,8CAAd,UACI,4BACKH,EAAKd,OAGV,gCACI,cAACuC,EAAA,EAAD,CAAQG,QAAS/B,EAAgBX,KAAMc,EAAKtB,GAAIiD,MAAM,UAAtD,oBACA,cAACF,EAAA,EAAD,CAAQG,QAAS,SAAC9B,GAAD,OAtE9B,SAACA,GACpB,IAAMkC,EAAQ7D,EAAS8D,WAAU,SAACjC,GAAD,OAAUA,EAAKtB,KAAOoB,EAAEI,OAAOhB,QAChEd,EAAa4D,GACbrC,EAAS,OAAQ,IAmEuCuC,CAAepC,IAAI+B,MAAO,CAACC,WAAY,OAAQ5C,KAAMc,EAAKtB,GAAIiD,MAAM,SAA5F,yBAPyDK,aAnGjG/D,EAASkE,aAAe,CACpB9D,eAAgB,KAChBC,eAAiB,KACjB+C,eAAgB,KAChBlD,SAAU,GACVC,aAAe,MAoHJH,QCrFAmE,MAlDf,WACE,MAA+B7D,mBAAS,IAAxC,mBAAO8D,EAAP,KAAgBC,EAAhB,KA0CA,OAvCAxD,qBAAU,WACLyD,aAAaC,QAAQ,SACtBF,EAAYG,KAAKC,MAAMH,aAAaC,QAAQ,YAE9C,IAEF1D,qBAAW,WACTyD,aAAaI,QAAQ,OAAOF,KAAKG,UAAUP,MAC3C,CAACA,IAgCC,8BACE,cAAC,EAAD,CAAUlE,SAAUkE,EAAUjE,aAAc,SAAC4D,GAAD,OArB7B,SAACA,GACpB,IAAMa,EAAW,YAAOR,GACxBQ,EAAYC,OAAOd,EAAM,GACzBM,EAAYO,GAkB+CzE,CAAa4D,IAAS1D,eAAgB,SAACI,EAAG4B,GAAJ,OAd9E,SAAC5B,EAAG4B,GACrB,IAAM0B,EAAQK,EAASJ,WAAU,SAACjC,GAAD,OAAmC,IAAzBA,EAAKtB,GAAGuB,QAAQvB,MAE3D2D,EAASL,GAAT,eACK1B,GAGL,IAAMuC,EAAW,YAAOR,GACxBC,EAAYO,GAMgGE,CAAarE,EAAG4B,IAAOjC,eAAgB,SAAC2B,GAAD,OA/BjI,SAACA,GACrB,IAAM6C,EAAW,YAAOR,GACxBQ,EAAYG,KAAZ,aACEtE,GAAKuE,eACFjD,IAELsC,EAAYO,GAyBiJK,CAAclD,SCvChKmD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASjD,OACP,cAAC,IAAMkD,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.08691eb7.chunk.js","sourcesContent":["import React,{ useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport {yupResolver} from \"@hookform/resolvers/yup\"\r\nimport { Button, Form, FormGroup, Input, Label  } from 'reactstrap';\r\nimport './TodoInput.scss'\r\nimport './TodoList.scss'\r\nimport * as yup from \"yup\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nTodoList.propTypes = {\r\n    onHandleSubmit: PropTypes.func,\r\n    onHandleSearch : PropTypes.func,\r\n    onHandleUpdate : PropTypes.func,\r\n    listTodo: PropTypes.array,\r\n    handleDelete : PropTypes.func,\r\n   \r\n};\r\n\r\nTodoList.defaultProps = {\r\n    onHandleSubmit: null,\r\n    onHandleUpdate : null,\r\n    onHandleSearch: null,\r\n    listTodo: [],\r\n    handleDelete : null\r\n}\r\n\r\nfunction TodoList(props) {\r\n    const {listTodo,handleDelete,onHandleSubmit,onHandleUpdate} = props;\r\n\r\n    const [show,setShow] = useState(false);\r\n    const [id,setId] = useState(0);\r\n    const [search,setSearch] = useState([...listTodo])\r\n\r\n    useEffect(()=>{\r\n        setSearch(listTodo);\r\n    },[listTodo]);\r\n\r\n    const validate = yup.object().shape({\r\n        name: yup.string().required(\"Vui lòng nhập trường này\")\r\n    })\r\n\r\n    const {control,handleSubmit,formState: {errors},setValue,getValues} = useForm({\r\n        resolver: yupResolver(validate) \r\n    });\r\n\r\n    const handleSubmitData = (data) => {\r\n        if(onHandleSubmit){\r\n            onHandleSubmit(data);\r\n            setValue(\"name\",'');\r\n            setShow(false);\r\n        }\r\n    }\r\n\r\n\r\n    const onHandleDelete = (e) => {\r\n        const index = listTodo.findIndex((todo) => todo.id === e.target.name)\r\n        handleDelete(index);\r\n        setValue(\"name\", '');\r\n    }\r\n\r\n    \r\n    const handleSetInput = (e) => {\r\n        const find = listTodo.find((todo) => todo.id.indexOf(e.target.name) !== -1);\r\n        setValue(\"name\",find.name); \r\n        setId(find.id)\r\n        setShow(true);\r\n    }\r\n\r\n    const handleUpdate = () => {\r\n        if(onHandleUpdate){\r\n            const value = {\r\n                id: id,\r\n                name: getValues(\"name\")\r\n            }\r\n            onHandleUpdate(id,value)\r\n        }\r\n        setValue('name','')\r\n        setShow(false)\r\n    }\r\n\r\n    const onHandleSearch =(e) =>{\r\n        const result = listTodo.filter((todo) => todo.name.trim().toLowerCase().indexOf(e.target.value.trim().toLowerCase()) !== -1);\r\n        setSearch(result);\r\n        \r\n\r\n    }\r\n    \r\n    return (\r\n        <div className=\"mf-2 todoform\">\r\n            <Form onSubmit={handleSubmit((data)=>handleSubmitData(data))} >\r\n                \r\n                <FormGroup >\r\n                    <Label className=\"todoform__name\" id=\"nameId\">Input work name</Label>\r\n                    <Controller \r\n                        name=\"name\"\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                        render={({field})=>{\r\n                            return <>\r\n                                        <Input className=\"mt-2 todoform__input\" id=\"nameId\" placeholder=\"Enter your work...\" {...field} onInput={(e) => onHandleSearch(e)} />\r\n                                        <span className=\"todoform__error\">{errors.name?.message}</span>\r\n                                        {console.log(field)}\r\n                                    </>\r\n                        }\r\n                    }\r\n                    />\r\n                    \r\n                    <Button type=\"Submit\" className=\"mt-2\" color=\"success\">Add</Button>\r\n                    {show?<Button type=\"button\" onClick={handleUpdate} className=\"mt-2\" style={{marginLeft: '4px'}} color=\"primary\">Update</Button>:null}\r\n                </FormGroup>\r\n                \r\n            </Form>\r\n            <div className=\"todolist\">\r\n                <ul  className=\"todolist__ul\">\r\n                    {\r\n                        search.map((todo,index) =>{\r\n                            return (\r\n                                <li className=\"todolist__li d-flex justify-content-between\" key={index}>\r\n                                    <p>\r\n                                        {todo.name}\r\n                                    </p>\r\n                                \r\n                                    <div>\r\n                                        <Button onClick={handleSetInput} name={todo.id} color=\"warning\">Update</Button>\r\n                                        <Button onClick={(e) => onHandleDelete(e)} style={{marginLeft: '4px'}} name={todo.id} color=\"danger\">Delete</Button>\r\n                                    </div>\r\n                                </li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n            \r\n        </div>\r\n       \r\n    );\r\n       \r\n}\r\n\r\nexport default TodoList;\r\n\r\n\r\n\r\n\r\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport TodoList from './Components/TodoList';\n\nfunction App() {\n  const [todoList,setToDoList] = useState([]);\n  \n\n  useEffect(() => {\n    if(localStorage.getItem('list')){\n      setToDoList(JSON.parse(localStorage.getItem('list')))\n    }\n  },[])\n \n  useEffect (() => {\n    localStorage.setItem('list',JSON.stringify(todoList));\n  },[todoList]);\n \n  const handleAddList = (todo) => {\n    const newTodoList = [...todoList];\n    newTodoList.push({\n      id:  uuidv4(),\n      ...todo\n    })\n    setToDoList(newTodoList);\n  }\n\n\n  const handleDelete = (index) => {\n    const newTodoList = [...todoList]\n    newTodoList.splice(index,1);\n    setToDoList(newTodoList);\n \n  }\n\n  const handleUpdate = (id,data) => {\n      const index = todoList.findIndex((todo) => todo.id.indexOf(id) !== -1);\n\n      todoList[index] = {\n        ...data\n      }\n\n      const newTodoList = [...todoList];\n      setToDoList(newTodoList);\n  }\n  \n\n  return (\n      <div >\n        <TodoList listTodo={todoList} handleDelete={(index) => handleDelete(index) } onHandleUpdate={(id,data) => handleUpdate(id,data)} onHandleSubmit={(todo)=>handleAddList(todo)}/>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}